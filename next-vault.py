import json
import os
import getpass
import requests
from cryptography.fernet import Fernet
from hashlib import sha256

DATA_FILE = "vault_data.json"

def derive_key(password: str) -> bytes:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∏–∑ –ø–∞—Ä–æ–ª—è."""
    digest = sha256(password.encode()).digest()
    return Fernet.generate_key()[:16] + digest[:16]  # —Å–º–µ—à–∏–≤–∞–µ–º –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏

def get_fernet(password: str) -> Fernet:
    return Fernet(sha256(password.encode()).digest()[:32])

def load_vault(password: str):
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "rb") as f:
        encrypted = f.read()
    if not encrypted:
        return {}
    fernet = get_fernet(password)
    try:
        decrypted = fernet.decrypt(encrypted).decode()
        return json.loads(decrypted)
    except:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π —Ñ–∞–π–ª.")
        exit(1)

def save_vault(vault: dict, password: str):
    fernet = get_fernet(password)
    encrypted = fernet.encrypt(json.dumps(vault).encode())
    with open(DATA_FILE, "wb") as f:
        f.write(encrypted)

def check_balance(address: str) -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ blockchain API (BTC –≤ –ø—Ä–∏–º–µ—Ä–µ)."""
    url = f"https://blockchain.info/rawaddr/{address}"
    resp = requests.get(url)
    if resp.status_code != 200:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"}
    data = resp.json()
    return {
        "final_balance": data.get("final_balance", 0) / 1e8,
        "n_tx": data.get("n_tx", 0)
    }

def main():
    print("üîê Next-Vault ‚Äî —É–º–Ω—ã–π —Å–µ–π—Ñ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å–æ–≤")
    password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å: ")

    vault = load_vault(password)

    while True:
        print("\n1. –î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å")
        print("2. –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å–∞")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å")
        print("4. –í—ã—Ö–æ–¥")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice == "1":
            addr = input("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–∞–¥—Ä–µ—Å: ").strip()
            note = input("–ó–∞–º–µ—Ç–∫–∞: ").strip()
            vault[addr] = {"note": note}
            save_vault(vault, password)
            print("‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        elif choice == "2":
            if not vault:
                print("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            else:
                for a, meta in vault.items():
                    print(f"{a} ‚Äî {meta['note']}")
        elif choice == "3":
            for addr in vault:
                info = check_balance(addr)
                if "error" in info:
                    print(f"{addr} ‚Äî –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
                else:
                    print(f"{addr}: {info['final_balance']} BTC, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {info['n_tx']}")
        elif choice == "4":
            print("üëã –í—ã—Ö–æ–¥.")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

if __name__ == "__main__":
    main()
